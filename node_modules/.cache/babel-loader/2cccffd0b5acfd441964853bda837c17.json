{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenPropType, onSelectPropType, selectedIndexPropType } from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\nvar Tabs = /*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Tabs, _Component);\n  function Tabs(props) {\n    var _this;\n    _this = _Component.call(this, props) || this;\n    _this.handleSelected = function (index, last, event) {\n      var onSelect = _this.props.onSelect; // Call change event handler\n\n      if (typeof onSelect === 'function') {\n        // Check if the change event handler cancels the tab change\n        if (onSelect(index, last, event) === false) return;\n      }\n      var state = {\n        // Set focus if the change was triggered from the keyboard\n        focus: event.type === 'keydown'\n      };\n      if (Tabs.inUncontrolledMode(_this.props)) {\n        // Update selected index\n        state.selectedIndex = index;\n      }\n      _this.setState(state);\n    };\n    _this.state = Tabs.copyPropsToState(_this.props, {}, props.defaultFocus);\n    return _this;\n  }\n  var _proto = Tabs.prototype;\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(newProps) {\n    if (process.env.NODE_ENV !== 'production' && Tabs.inUncontrolledMode(newProps) !== Tabs.inUncontrolledMode(this.props)) {\n      throw new Error(\"Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\\nFor more information about controlled and uncontrolled mode of react-tabs see the README.\");\n    } // Use a transactional update to prevent race conditions\n    // when reading the state in copyPropsToState\n    // See https://github.com/reactjs/react-tabs/issues/51\n\n    this.setState(function (state) {\n      return Tabs.copyPropsToState(newProps, state);\n    });\n  };\n  Tabs.inUncontrolledMode = function inUncontrolledMode(props) {\n    return props.selectedIndex === null;\n  };\n\n  // preserve the existing selectedIndex from state.\n  // If the state has not selectedIndex, default to the defaultIndex or 0\n  Tabs.copyPropsToState = function copyPropsToState(props, state, focus) {\n    if (focus === void 0) {\n      focus = false;\n    }\n    var newState = {\n      focus: focus\n    };\n    if (Tabs.inUncontrolledMode(props)) {\n      var maxTabIndex = getTabsCount(props.children) - 1;\n      var selectedIndex = null;\n      if (state.selectedIndex != null) {\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\n      } else {\n        selectedIndex = props.defaultIndex || 0;\n      }\n      newState.selectedIndex = selectedIndex;\n    }\n    return newState;\n  };\n  _proto.render = function render() {\n    var _this$props = this.props,\n      children = _this$props.children,\n      defaultIndex = _this$props.defaultIndex,\n      defaultFocus = _this$props.defaultFocus,\n      props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"defaultIndex\", \"defaultFocus\"]);\n    var _this$state = this.state,\n      focus = _this$state.focus,\n      selectedIndex = _this$state.selectedIndex;\n    props.focus = focus;\n    props.onSelect = this.handleSelected;\n    if (selectedIndex != null) {\n      props.selectedIndex = selectedIndex;\n    }\n    return React.createElement(UncontrolledTabs, props, children);\n  };\n  return Tabs;\n}(Component);\nTabs.defaultProps = {\n  defaultFocus: false,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null\n};\nexport { Tabs as default };\nTabs.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: childrenPropType,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  disabledTabClassName: PropTypes.string,\n  domRef: PropTypes.func,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string\n} : {};\nTabs.tabsRole = 'Tabs';","map":null,"metadata":{},"sourceType":"module"}