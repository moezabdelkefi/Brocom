{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _reactDom = require('react-dom');\nvar _reactDom2 = _interopRequireDefault(_reactDom);\nvar _trackHelper = require('./trackHelper');\nvar _objectAssign = require('object-assign');\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nvar _innerSliderUtils = require('../utils/innerSliderUtils');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar helpers = {\n  update: function update(props) {\n    var recursionLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var slickList = _reactDom2.default.findDOMNode(this.list);\n    var slideCount = _react2.default.Children.count(props.children);\n    var listWidth = (0, _innerSliderUtils.getWidth)(slickList);\n    var trackWidth = (0, _innerSliderUtils.getWidth)(_reactDom2.default.findDOMNode(this.track));\n    var slideWidth;\n    if (!props.vertical) {\n      var centerPaddingAdj = props.centerMode && parseInt(props.centerPadding) * 2;\n      if (props.centerPadding.slice(-1) === '%') {\n        centerPaddingAdj *= listWidth / 100;\n      }\n      slideWidth = Math.ceil(((0, _innerSliderUtils.getWidth)(slickList) - centerPaddingAdj) / props.slidesToShow);\n    } else {\n      slideWidth = Math.ceil((0, _innerSliderUtils.getWidth)(slickList));\n    }\n    var slideHeight = (0, _innerSliderUtils.getHeight)(slickList.querySelector('[data-index=\"0\"]'));\n    var listHeight = slideHeight * props.slidesToShow;\n\n    // pause slider if autoplay is set to false\n    if (!props.autoplay) {\n      this.pause();\n    } else {\n      this.autoPlay(props.autoplay);\n    }\n    var slidesToLoad = (0, _innerSliderUtils.getOnDemandLazySlides)({}, this.props, this.state);\n    if (slidesToLoad.length > 0 && this.props.onLazyLoad) {\n      this.props.onLazyLoad(slidesToLoad);\n    }\n    var prevLazyLoadedList = this.state.lazyLoadedList;\n    this.setState({\n      slideCount: slideCount,\n      slideWidth: slideWidth,\n      listWidth: listWidth,\n      trackWidth: trackWidth,\n      slideHeight: slideHeight,\n      listHeight: listHeight,\n      lazyLoadedList: prevLazyLoadedList.concat(slidesToLoad)\n    }, function () {\n      if (!slideWidth) {\n        if (recursionLevel < 2) {\n          this.update(this.props, recursionLevel + 1);\n        }\n      }\n      var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n        slideIndex: this.state.currentSlide,\n        trackRef: this.track\n      }, props, this.state));\n      // getCSS function needs previously set state\n      var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n        left: targetLeft\n      }, props, this.state));\n      this.setState({\n        trackStyle: trackStyle\n      });\n    });\n  },\n  adaptHeight: function adaptHeight() {\n    if (this.props.adaptiveHeight) {\n      var selector = '[data-index=\"' + this.state.currentSlide + '\"]';\n      if (this.list) {\n        var slickList = _reactDom2.default.findDOMNode(this.list);\n        var elem = slickList.querySelector(selector) || {};\n        slickList.style.height = (elem.offsetHeight || 0) + 'px';\n      }\n    }\n  },\n  slideHandler: function slideHandler(index) {\n    var _this = this;\n\n    // index is target slide index\n    // Functionality of animateSlide and postSlide is merged into this function\n    var animationTargetSlide, finalTargetSlide;\n    var animationTargetLeft, finalTargetLeft;\n    var callback;\n    if (this.props.waitForAnimate && this.state.animating) {\n      return;\n    }\n    if (this.props.fade) {\n      finalTargetSlide = this.state.currentSlide;\n\n      // Don't change slide if infinite=false and target slide is out of range\n      if (this.props.infinite === false && (index < 0 || index >= this.state.slideCount)) {\n        return;\n      }\n\n      //  Shifting animationTargetSlide back into the range\n      if (index < 0) {\n        animationTargetSlide = index + this.state.slideCount;\n      } else if (index >= this.state.slideCount) {\n        animationTargetSlide = index - this.state.slideCount;\n      } else {\n        animationTargetSlide = index;\n      }\n      if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(animationTargetSlide) < 0) {\n        this.setState(function (prevState, props) {\n          return {\n            lazyLoadedList: prevState.lazyLoadedList.concat(animationTargetSlide)\n          };\n        });\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad([animationTargetSlide]);\n        }\n      }\n      callback = function callback() {\n        _this.setState({\n          animating: false\n        });\n        if (_this.props.afterChange) {\n          _this.props.afterChange(animationTargetSlide);\n        }\n        delete _this.animationEndCallback;\n      };\n      this.setState({\n        animating: true,\n        currentSlide: animationTargetSlide\n      }, function () {\n        if (_this.props.asNavFor && _this.props.asNavFor.innerSlider.state.currentSlide !== _this.state.currentSlide) {\n          _this.props.asNavFor.innerSlider.slideHandler(index);\n        }\n        _this.animationEndCallback = setTimeout(callback, _this.props.speed);\n      });\n      if (this.props.beforeChange) {\n        this.props.beforeChange(this.state.currentSlide, animationTargetSlide);\n      }\n      this.autoPlay();\n      return;\n    }\n    animationTargetSlide = index;\n\n    /*\n      @TODO: Make sure to leave no bug in the code below\n      start: critical checkpoint\n    */\n    if (animationTargetSlide < 0) {\n      if (this.props.infinite === false) {\n        finalTargetSlide = 0;\n      } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {\n        finalTargetSlide = this.state.slideCount - this.state.slideCount % this.props.slidesToScroll;\n      } else {\n        finalTargetSlide = this.state.slideCount + animationTargetSlide;\n      }\n    } else if (this.props.centerMode && animationTargetSlide >= this.state.slideCount) {\n      if (this.props.infinite === false) {\n        animationTargetSlide = this.state.slideCount - 1;\n        finalTargetSlide = this.state.slideCount - 1;\n      } else {\n        animationTargetSlide = this.state.slideCount;\n        finalTargetSlide = 0;\n      }\n    } else if (animationTargetSlide >= this.state.slideCount) {\n      if (this.props.infinite === false) {\n        finalTargetSlide = this.state.slideCount - this.props.slidesToShow;\n      } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {\n        finalTargetSlide = 0;\n      } else {\n        finalTargetSlide = animationTargetSlide - this.state.slideCount;\n      }\n    } else if (this.state.currentSlide + this.slidesToShow < this.state.slideCount && animationTargetSlide + this.props.slidesToShow >= this.state.slideCount) {\n      if (this.props.infinite === false) {\n        finalTargetSlide = this.state.slideCount - this.props.slidesToShow;\n      } else {\n        if ((this.state.slideCount - animationTargetSlide) % this.props.slidesToScroll !== 0) {\n          finalTargetSlide = this.state.slideCount - this.props.slidesToShow;\n        } else {\n          finalTargetSlide = animationTargetSlide;\n        }\n      }\n    } else {\n      finalTargetSlide = animationTargetSlide;\n    }\n\n    /* \n      stop: critical checkpoint\n    */\n\n    animationTargetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n      slideIndex: animationTargetSlide,\n      trackRef: this.track\n    }, this.props, this.state));\n    finalTargetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n      slideIndex: finalTargetSlide,\n      trackRef: this.track\n    }, this.props, this.state));\n    if (this.props.infinite === false) {\n      if (animationTargetLeft === finalTargetLeft) {\n        animationTargetSlide = finalTargetSlide;\n      }\n      animationTargetLeft = finalTargetLeft;\n    }\n    if (this.props.beforeChange) {\n      this.props.beforeChange(this.state.currentSlide, finalTargetSlide);\n    }\n    if (this.props.lazyLoad) {\n      var slidesToLoad = (0, _innerSliderUtils.getOnDemandLazySlides)((0, _objectAssign2.default)({}, this.props, this.state, {\n        currentSlide: animationTargetSlide\n      }));\n      if (slidesToLoad.length > 0) {\n        this.setState(function (prevState, props) {\n          return {\n            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n          };\n        });\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad);\n        }\n      }\n    }\n    // Slide Transition happens here.\n    // animated transition happens to target Slide and\n    // non - animated transition happens to current Slide\n    // If CSS transitions are false, directly go the current slide.\n\n    if (this.props.useCSS === false) {\n      this.setState({\n        currentSlide: finalTargetSlide,\n        trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n          left: finalTargetLeft\n        }, this.props, this.state))\n      }, function () {\n        if (this.props.afterChange) {\n          this.props.afterChange(finalTargetSlide);\n        }\n      });\n    } else {\n      var nextStateChanges = {\n        animating: false,\n        currentSlide: finalTargetSlide,\n        trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n          left: finalTargetLeft\n        }, this.props, this.state)),\n        swipeLeft: null\n      };\n      callback = function callback() {\n        _this.setState(nextStateChanges, function () {\n          if (_this.props.afterChange) {\n            _this.props.afterChange(finalTargetSlide);\n          }\n          delete _this.animationEndCallback;\n        });\n      };\n      this.setState({\n        animating: true,\n        currentSlide: finalTargetSlide,\n        trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2.default)({\n          left: animationTargetLeft\n        }, this.props, this.state))\n      }, function () {\n        if (_this.props.asNavFor && _this.props.asNavFor.innerSlider.state.currentSlide !== _this.state.currentSlide) {\n          _this.props.asNavFor.innerSlider.slideHandler(index);\n        }\n        _this.animationEndCallback = setTimeout(callback, _this.props.speed);\n      });\n    }\n    this.autoPlay();\n  },\n  play: function play() {\n    var nextIndex;\n\n    // if (!this.state.mounted) {\n    //   return false\n    // }\n\n    if (this.props.rtl) {\n      nextIndex = this.state.currentSlide - this.props.slidesToScroll;\n    } else {\n      if ((0, _innerSliderUtils.canGoNext)(_extends({}, this.props, this.state))) {\n        nextIndex = this.state.currentSlide + this.props.slidesToScroll;\n      } else {\n        return false;\n      }\n    }\n    this.slideHandler(nextIndex);\n  },\n  autoPlay: function autoPlay() {\n    var autoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.autoplayTimer) {\n      clearTimeout(this.autoplayTimer);\n    }\n    if (autoplay || this.props.autoplay) {\n      this.autoplayTimer = setTimeout(this.play, this.props.autoplaySpeed);\n    }\n  },\n  pause: function pause() {\n    if (this.autoplayTimer) {\n      clearTimeout(this.autoplayTimer);\n      this.autoplayTimer = null;\n    }\n  }\n};\nexports.default = helpers;","map":null,"metadata":{},"sourceType":"script"}